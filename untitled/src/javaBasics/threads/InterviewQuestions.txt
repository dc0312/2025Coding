Interview Questions on Thread States
====================================
What are all thread states in Java?
‚Üí NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED.

What‚Äôs the difference between WAITING and TIMED_WAITING?
‚Üí WAITING is indefinite; TIMED_WAITING has a timeout.

Can a thread go back from TERMINATED to RUNNABLE?
‚Üí No, once terminated, it cannot be restarted.

What‚Äôs the difference between RUNNABLE and RUNNING?
‚Üí RUNNING is a substate of RUNNABLE when CPU is executing it.

When does a thread go into BLOCKED state?
‚Üí When waiting for a monitor lock (synchronized) already held by another thread.

Coding Question:
================
Write a program to show all lifecyles
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Interview Questions on Thread Methods
======================================
Does sleep() release the lock? ‚ùå No

Can it be interrupted? ‚úÖ Yes ‚Üí throws InterruptedException

Does yield() guarantee context switch? ‚ùå No

State change? RUNNING ‚Üí RUNNABLE

Does join() release locks? ‚úÖ Yes (because it uses wait internally)

What if timeout is given? ‚Üí returns when timeout ends or thread completes, whichever first

Does interrupt() stop thread immediately? ‚ùå No

When does it throw InterruptedException? ‚Üí If thread is in sleep/wait/join

Quick Comparison Table
Method	Releases Lock?	Can be Interrupted?	State
sleep()	‚ùå No	            ‚úÖ Yes	        TIMED_WAITING
yield()	‚ùå No	            N/A	            RUNNABLE
join()	‚úÖ Yes	            ‚úÖ Yes	        WAITING / TIMED_WAITING
wait()	‚úÖ Yes	            ‚úÖ Yes	        WAITING / TIMED_WAITING
park()	‚úÖ Yes	            ‚úÖ Yes	        WAITING

Difference between sleep() and wait()?
‚Üí sleep() doesn‚Äôt release lock, wait() does.

Difference between yield() and sleep()?
‚Üí yield() just hints, sleep() guarantees pause.

Can you interrupt a thread in sleep?
‚Üí Yes ‚Üí InterruptedException.

Why is join() implemented using wait() internally?
‚Üí To allow the main thread to wait without busy looping.

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Comparison Table
| Feature           | `sleep()`                     | `wait()`                                |
| ----------------- | ----------------------------- | --------------------------------------- |
| Class             | `Thread`                      | `Object`                                |
| Purpose           | Pause execution for time      | Inter-thread communication              |
| Lock release      | ‚ùå No                          | ‚úÖ Yes                                   |
| Must hold lock?   | ‚ùå No                          | ‚úÖ Yes (inside `synchronized`)           |
| Who wakes thread? | Timer expiry                  | `notify()` / `notifyAll()` (or timeout) |
| Exception         | Throws `InterruptedException` | Throws `InterruptedException`           |

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Difference between notify() & notifyAll()?

notify() wakes up one arbitrary thread.

notifyAll() wakes up all waiting threads.

Which one is better?

Use notify() if only one thread needs to wake up.

Use notifyAll() to avoid deadlocks when multiple threads may be eligible.

Can we call notify() outside synchronized block?

‚ùå No ‚Üí throws IllegalMonitorStateException.

üí° Pro Tip: Most interviewers expect you to say ‚Äúalways prefer notifyAll() unless you are 100% sure
only one thread is waiting‚Äù, because notify() can cause missed signals & deadlocks.
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
